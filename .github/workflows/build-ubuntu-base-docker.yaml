name: Run Docker – Ubuntu
################################################################################
# TRIGGERS
################################################################################
on:
  push:
    branches: [ main ]
    paths:    [ '**/*Dockerfile' ]

  schedule:
    - cron: '0 0 1 * *'

  workflow_dispatch:
    inputs:
      working_directory:
        description: 'Folder that contains the Dockerfile (relative to repo-root, or “github_workspace”)'
        type: string
        default: 'containers/ubuntu'

      build_context:
        description: 'docker build context (relative to repo-root, or “github_workspace”)'
        type: string
        default: 'github_workspace'

      docker_image_name:
        description: 'Image name (repo/name – **without** registry/org)'
        type: string
        default: 'ubuntu-base-docker-container/ubuntu-base'

      registry_url:
        description: 'Container registry URL'
        type: string
        default: 'ghcr.io'

      enable_debug_mode:
        description: '-DebugMode $true for the helper script'
        type: boolean
        default: false

      docker_file_name:
        description: 'Dockerfile name'
        type: string
        default: 'Dockerfile'

      push_docker_image:
        description: 'Push image after build? ("true" / "false")'
        type: string
        default: 'true'

################################################################################
# JOBS
################################################################################
jobs:
  build-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh

    ########################
    # 1.  Resolve inputs   #
    ########################
    env:
      # Fit for *all* trigger types (push / schedule / manual)
      IN_WD:     ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.working_directory ) || 'containers/ubuntu' }}
      IN_CTX:    ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.build_context     ) || 'github_workspace'   }}
      IN_IMG:    ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.docker_image_name ) || 'ubuntu-base-docker-container/ubuntu-base' }}
      IN_REG:    ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.registry_url      ) || 'ghcr.io' }}
      IN_DBG:    ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.enable_debug_mode ) || 'false'  }}
      IN_PUSH:   ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.push_docker_image ) || 'true'   }}
      IN_DFNAME: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.docker_file_name  ) || 'Dockerfile' }}

    ########################
    # 2.  Steps            #
    ########################
    steps:
      - uses: actions/checkout@v3

      - name: Build & (optional) push image
        run: >
          # ────────────────────────────────────────────────────────────────
          #  Turn input paths into ABSOLUTE ones            ───────────────
          # ────────────────────────────────────────────────────────────────
          $repoRoot = '${{ github.workspace }}'

          # Working directory
          $workingDir = if ($Env:IN_WD -eq 'github_workspace') {
                           $repoRoot
                         } else {
                           Join-Path $repoRoot $Env:IN_WD
                         }

          # Build context
          $contextPath = if ($Env:IN_CTX -eq 'github_workspace') {
                            $repoRoot          # repo root
                         } elseif ($Env:IN_CTX -eq '.') {
                            $workingDir        # caller asked for “.” → same as WD
                         } else {
                            Join-Path $repoRoot $Env:IN_CTX
                         }

          # ────────────────────────────────────────────────────────────────
          #  Call the helper script                                       
          # ────────────────────────────────────────────────────────────────
          ./Run-Docker.ps1 `
              -WorkingDirectory $workingDir `
              -BuildContext     $contextPath `
              -DockerFileName   $Env:IN_DFNAME `
              -DockerImageName  $Env:IN_IMG `
              -RegistryUrl      $Env:IN_REG `
              -RegistryUsername '${{ secrets.RegistryUsername }}' `
              -RegistryPassword '${{ secrets.RegistryPassword }}' `
              -ImageOrg         '${{ github.repository_owner }}' `
              -PushDockerImage  $Env:IN_PUSH `
              -DebugMode        $Env:IN_DBG
